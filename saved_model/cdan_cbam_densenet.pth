step1: prepare your environment
pip install torch>=2.1.0 torchvision>=0.16.0
pip install Pillow>=9.0.0
pip install numpy>=1.24.0
pip install matplotlib>=3.7.0
pip install opencv-python>=4.8.0
pip install lpips>=0.1.4
step2: Intialize the model
if __name__ == "__main__":
    device = 'cuda' if torch.cuda.is_available() else 'cpu'
    model = CDAN_CBAM_DenseNet().to(device)   # ‚Üê initialization
step 3: load the model parameters
model.load_state_dict(torch.load("cdan_cbam_densenet.pth", map_location=device))
step4:model to evaluation mode
model.eval()   # set to evaluation mode
step 5: make prediction on new images
# Resize if needed, convert to tensor
resize_dim = (224, 224)  # Optional: comment this out if original size is desired
transform = transforms.Compose([
    transforms.Resize(resize_dim),
    transforms.ToTensor()  # Converts to [0,1]
])
# prediction
with torch.no_grad():
    for fname in os.listdir(input_dir):
        if not fname.lower().endswith((".png", ".jpg", ".jpeg")):
  continue
step6:intrepret the output
output_image = output.squeeze(0).permute(1,2,0).cpu().numpy()
